
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a9c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08000bcc  08000bcc  00010bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c00  08000c00  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000c00  08000c00  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c00  08000c00  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c00  08000c00  00010c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c04  08000c04  00010c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000c28  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000c28  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003063  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007e0  00000000  00000000  000230ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006a0  00000000  00000000  0002388c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000140  00000000  00000000  00023f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f8  00000000  00000000  00024070  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002494  00000000  00000000  00024168  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001b87  00000000  00000000  000265fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008cd4  00000000  00000000  00028183  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00030e57  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000398  00000000  00000000  00030ed4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bb4 	.word	0x08000bb4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000bb4 	.word	0x08000bb4

08000170 <my_wait>:
#define SEVEN 	 0x19
#define EIGHT    0x00
#define NINE 	 0x10

void my_wait(int x)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i=0;i<x;i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <my_wait+0x26>
		for(j=0;j<255;j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <my_wait+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <my_wait+0x14>
	for(i=0;i<x;i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	68fa      	ldr	r2, [r7, #12]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <my_wait+0xe>
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <clock_init>:

void clock_init()
{
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
	//Enable clock for GPIOA
	RCC_GPIOA_CLK_EN();
 80001ac:	4b07      	ldr	r3, [pc, #28]	; (80001cc <clock_init+0x24>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a06      	ldr	r2, [pc, #24]	; (80001cc <clock_init+0x24>)
 80001b2:	f043 0304 	orr.w	r3, r3, #4
 80001b6:	6193      	str	r3, [r2, #24]
	//Enable clock for GPIOB
	RCC_GPIOB_CLK_EN();
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <clock_init+0x24>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a03      	ldr	r2, [pc, #12]	; (80001cc <clock_init+0x24>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]

}
 80001c4:	bf00      	nop
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr
 80001cc:	40021000 	.word	0x40021000

080001d0 <GPIO_init>:

void GPIO_init()
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	//set all ports form 9to 15 as output PP to display numbers on the seven sigment
	//00: General purpose output push-pull
	//01: Output mode, max speed 10 MHz.

	pinCfg.GPIO_PinNumber=GPIO_PIN_9;
 80001d4:	4b31      	ldr	r3, [pc, #196]	; (800029c <GPIO_init+0xcc>)
 80001d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001da:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001dc:	4b2f      	ldr	r3, [pc, #188]	; (800029c <GPIO_init+0xcc>)
 80001de:	2204      	movs	r2, #4
 80001e0:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80001e2:	4b2e      	ldr	r3, [pc, #184]	; (800029c <GPIO_init+0xcc>)
 80001e4:	2201      	movs	r2, #1
 80001e6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &pinCfg);
 80001e8:	492c      	ldr	r1, [pc, #176]	; (800029c <GPIO_init+0xcc>)
 80001ea:	482d      	ldr	r0, [pc, #180]	; (80002a0 <GPIO_init+0xd0>)
 80001ec:	f000 fc02 	bl	80009f4 <MCAL_GPIO_Init>


	pinCfg.GPIO_PinNumber=GPIO_PIN_10;
 80001f0:	4b2a      	ldr	r3, [pc, #168]	; (800029c <GPIO_init+0xcc>)
 80001f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001f6:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001f8:	4b28      	ldr	r3, [pc, #160]	; (800029c <GPIO_init+0xcc>)
 80001fa:	2204      	movs	r2, #4
 80001fc:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80001fe:	4b27      	ldr	r3, [pc, #156]	; (800029c <GPIO_init+0xcc>)
 8000200:	2201      	movs	r2, #1
 8000202:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &pinCfg);
 8000204:	4925      	ldr	r1, [pc, #148]	; (800029c <GPIO_init+0xcc>)
 8000206:	4826      	ldr	r0, [pc, #152]	; (80002a0 <GPIO_init+0xd0>)
 8000208:	f000 fbf4 	bl	80009f4 <MCAL_GPIO_Init>

	pinCfg.GPIO_PinNumber=GPIO_PIN_11;
 800020c:	4b23      	ldr	r3, [pc, #140]	; (800029c <GPIO_init+0xcc>)
 800020e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000212:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000214:	4b21      	ldr	r3, [pc, #132]	; (800029c <GPIO_init+0xcc>)
 8000216:	2204      	movs	r2, #4
 8000218:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 800021a:	4b20      	ldr	r3, [pc, #128]	; (800029c <GPIO_init+0xcc>)
 800021c:	2201      	movs	r2, #1
 800021e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &pinCfg);
 8000220:	491e      	ldr	r1, [pc, #120]	; (800029c <GPIO_init+0xcc>)
 8000222:	481f      	ldr	r0, [pc, #124]	; (80002a0 <GPIO_init+0xd0>)
 8000224:	f000 fbe6 	bl	80009f4 <MCAL_GPIO_Init>

	pinCfg.GPIO_PinNumber=GPIO_PIN_12;
 8000228:	4b1c      	ldr	r3, [pc, #112]	; (800029c <GPIO_init+0xcc>)
 800022a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800022e:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <GPIO_init+0xcc>)
 8000232:	2204      	movs	r2, #4
 8000234:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000236:	4b19      	ldr	r3, [pc, #100]	; (800029c <GPIO_init+0xcc>)
 8000238:	2201      	movs	r2, #1
 800023a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &pinCfg);
 800023c:	4917      	ldr	r1, [pc, #92]	; (800029c <GPIO_init+0xcc>)
 800023e:	4818      	ldr	r0, [pc, #96]	; (80002a0 <GPIO_init+0xd0>)
 8000240:	f000 fbd8 	bl	80009f4 <MCAL_GPIO_Init>

	pinCfg.GPIO_PinNumber=GPIO_PIN_13;
 8000244:	4b15      	ldr	r3, [pc, #84]	; (800029c <GPIO_init+0xcc>)
 8000246:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800024a:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800024c:	4b13      	ldr	r3, [pc, #76]	; (800029c <GPIO_init+0xcc>)
 800024e:	2204      	movs	r2, #4
 8000250:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000252:	4b12      	ldr	r3, [pc, #72]	; (800029c <GPIO_init+0xcc>)
 8000254:	2201      	movs	r2, #1
 8000256:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &pinCfg);
 8000258:	4910      	ldr	r1, [pc, #64]	; (800029c <GPIO_init+0xcc>)
 800025a:	4811      	ldr	r0, [pc, #68]	; (80002a0 <GPIO_init+0xd0>)
 800025c:	f000 fbca 	bl	80009f4 <MCAL_GPIO_Init>

	//============================

	pinCfg.GPIO_PinNumber=GPIO_PIN_14;
 8000260:	4b0e      	ldr	r3, [pc, #56]	; (800029c <GPIO_init+0xcc>)
 8000262:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000266:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000268:	4b0c      	ldr	r3, [pc, #48]	; (800029c <GPIO_init+0xcc>)
 800026a:	2204      	movs	r2, #4
 800026c:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <GPIO_init+0xcc>)
 8000270:	2201      	movs	r2, #1
 8000272:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &pinCfg);
 8000274:	4909      	ldr	r1, [pc, #36]	; (800029c <GPIO_init+0xcc>)
 8000276:	480a      	ldr	r0, [pc, #40]	; (80002a0 <GPIO_init+0xd0>)
 8000278:	f000 fbbc 	bl	80009f4 <MCAL_GPIO_Init>

	pinCfg.GPIO_PinNumber=GPIO_PIN_15;
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <GPIO_init+0xcc>)
 800027e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000282:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <GPIO_init+0xcc>)
 8000286:	2204      	movs	r2, #4
 8000288:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 800028a:	4b04      	ldr	r3, [pc, #16]	; (800029c <GPIO_init+0xcc>)
 800028c:	2201      	movs	r2, #1
 800028e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &pinCfg);
 8000290:	4902      	ldr	r1, [pc, #8]	; (800029c <GPIO_init+0xcc>)
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <GPIO_init+0xd0>)
 8000294:	f000 fbae 	bl	80009f4 <MCAL_GPIO_Init>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	2000003c 	.word	0x2000003c
 80002a0:	40010c00 	.word	0x40010c00

080002a4 <main>:



int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b088      	sub	sp, #32
 80002a8:	af00      	add	r7, sp, #0
	clock_init() ;
 80002aa:	f7ff ff7d 	bl	80001a8 <clock_init>
	GPIO_init() ;
 80002ae:	f7ff ff8f 	bl	80001d0 <GPIO_init>
	LCD_INIT();
 80002b2:	f000 f9d1 	bl	8000658 <LCD_INIT>
	unsigned char key_pressed;
	//check on the lcd
	LCD_WRITE_STRING("hey LOLA");
 80002b6:	482e      	ldr	r0, [pc, #184]	; (8000370 <main+0xcc>)
 80002b8:	f000 fb14 	bl	80008e4 <LCD_WRITE_STRING>
	my_wait(500);
 80002bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002c0:	f7ff ff56 	bl	8000170 <my_wait>
	LCD_clear_screen();
 80002c4:	f000 fa88 	bl	80007d8 <LCD_clear_screen>
	unsigned char LCD_DISPLAY [11] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 80002c8:	4a2a      	ldr	r2, [pc, #168]	; (8000374 <main+0xd0>)
 80002ca:	f107 0310 	add.w	r3, r7, #16
 80002ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d0:	c303      	stmia	r3!, {r0, r1}
 80002d2:	801a      	strh	r2, [r3, #0]
 80002d4:	3302      	adds	r3, #2
 80002d6:	0c12      	lsrs	r2, r2, #16
 80002d8:	701a      	strb	r2, [r3, #0]
	unsigned char SEG [11] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
 80002da:	4a27      	ldr	r2, [pc, #156]	; (8000378 <main+0xd4>)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	ca07      	ldmia	r2, {r0, r1, r2}
 80002e0:	c303      	stmia	r3!, {r0, r1}
 80002e2:	801a      	strh	r2, [r3, #0]
 80002e4:	3302      	adds	r3, #2
 80002e6:	0c12      	lsrs	r2, r2, #16
 80002e8:	701a      	strb	r2, [r3, #0]
	for (unsigned char i = 0; i < 11; i++) {
 80002ea:	2300      	movs	r3, #0
 80002ec:	77fb      	strb	r3, [r7, #31]
 80002ee:	e01b      	b.n	8000328 <main+0x84>
		LCD_WRITE_CHAR(LCD_DISPLAY[i]);
 80002f0:	7ffb      	ldrb	r3, [r7, #31]
 80002f2:	f107 0220 	add.w	r2, r7, #32
 80002f6:	4413      	add	r3, r2
 80002f8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 facf 	bl	80008a0 <LCD_WRITE_CHAR>
		MCAL_GPIO_WritePort(GPIOB, SEG[i] << 9); /* write data on to the LED port */
 8000302:	7ffb      	ldrb	r3, [r7, #31]
 8000304:	f107 0220 	add.w	r2, r7, #32
 8000308:	4413      	add	r3, r2
 800030a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800030e:	b29b      	uxth	r3, r3
 8000310:	025b      	lsls	r3, r3, #9
 8000312:	b29b      	uxth	r3, r3
 8000314:	4619      	mov	r1, r3
 8000316:	4819      	ldr	r0, [pc, #100]	; (800037c <main+0xd8>)
 8000318:	f000 fc19 	bl	8000b4e <MCAL_GPIO_WritePort>
		my_wait(100);
 800031c:	2064      	movs	r0, #100	; 0x64
 800031e:	f7ff ff27 	bl	8000170 <my_wait>
	for (unsigned char i = 0; i < 11; i++) {
 8000322:	7ffb      	ldrb	r3, [r7, #31]
 8000324:	3301      	adds	r3, #1
 8000326:	77fb      	strb	r3, [r7, #31]
 8000328:	7ffb      	ldrb	r3, [r7, #31]
 800032a:	2b0a      	cmp	r3, #10
 800032c:	d9e0      	bls.n	80002f0 <main+0x4c>
		/* wait for 1 second */
	}
	LCD_clear_screen();
 800032e:	f000 fa53 	bl	80007d8 <LCD_clear_screen>
	Keypad_init();
 8000332:	f000 f851 	bl	80003d8 <Keypad_init>
	LCD_WRITE_STRING("Keypad is ready");
 8000336:	4812      	ldr	r0, [pc, #72]	; (8000380 <main+0xdc>)
 8000338:	f000 fad4 	bl	80008e4 <LCD_WRITE_STRING>
	my_wait(500);
 800033c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000340:	f7ff ff16 	bl	8000170 <my_wait>
	LCD_clear_screen();
 8000344:	f000 fa48 	bl	80007d8 <LCD_clear_screen>

	while(1)
	{
		key_pressed = Keypad_getkey();
 8000348:	f000 f8bc 	bl	80004c4 <Keypad_getkey>
 800034c:	4603      	mov	r3, r0
 800034e:	77bb      	strb	r3, [r7, #30]
		switch (key_pressed) {
 8000350:	7fbb      	ldrb	r3, [r7, #30]
 8000352:	2b3f      	cmp	r3, #63	; 0x3f
 8000354:	d002      	beq.n	800035c <main+0xb8>
 8000356:	2b41      	cmp	r3, #65	; 0x41
 8000358:	d008      	beq.n	800036c <main+0xc8>
 800035a:	e002      	b.n	8000362 <main+0xbe>
		case 'A':
			break;
		case '?':
			LCD_clear_screen();
 800035c:	f000 fa3c 	bl	80007d8 <LCD_clear_screen>
			break;
 8000360:	e005      	b.n	800036e <main+0xca>
		default:
			LCD_WRITE_CHAR(key_pressed);
 8000362:	7fbb      	ldrb	r3, [r7, #30]
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fa9b 	bl	80008a0 <LCD_WRITE_CHAR>
			break;
 800036a:	e000      	b.n	800036e <main+0xca>
			break;
 800036c:	bf00      	nop
		key_pressed = Keypad_getkey();
 800036e:	e7eb      	b.n	8000348 <main+0xa4>
 8000370:	08000bcc 	.word	0x08000bcc
 8000374:	08000be8 	.word	0x08000be8
 8000378:	08000bf4 	.word	0x08000bf4
 800037c:	40010c00 	.word	0x40010c00
 8000380:	08000bd8 	.word	0x08000bd8

08000384 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000384:	480d      	ldr	r0, [pc, #52]	; (80003bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000386:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000388:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800038c:	480c      	ldr	r0, [pc, #48]	; (80003c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800038e:	490d      	ldr	r1, [pc, #52]	; (80003c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000390:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <LoopForever+0xe>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000394:	e002      	b.n	800039c <LoopCopyDataInit>

08000396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039a:	3304      	adds	r3, #4

0800039c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800039c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a0:	d3f9      	bcc.n	8000396 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a2:	4a0a      	ldr	r2, [pc, #40]	; (80003cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a4:	4c0a      	ldr	r4, [pc, #40]	; (80003d0 <LoopForever+0x16>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a8:	e001      	b.n	80003ae <LoopFillZerobss>

080003aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ac:	3204      	adds	r2, #4

080003ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b0:	d3fb      	bcc.n	80003aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003b2:	f000 fbdb 	bl	8000b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003b6:	f7ff ff75 	bl	80002a4 <main>

080003ba <LoopForever>:

LoopForever:
    b LoopForever
 80003ba:	e7fe      	b.n	80003ba <LoopForever>
  ldr   r0, =_estack
 80003bc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80003c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80003c8:	08000c08 	.word	0x08000c08
  ldr r2, =_sbss
 80003cc:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80003d0:	20000040 	.word	0x20000040

080003d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d4:	e7fe      	b.n	80003d4 <ADC1_2_IRQHandler>
	...

080003d8 <Keypad_init>:
#include "keypad.h"

int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2, C3};//columns

void Keypad_init(){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	//DataDir_KEYPAD_PORT &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
	//DataDir_KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
	pinCfg.GPIO_PinNumber=R0;
 80003dc:	4b37      	ldr	r3, [pc, #220]	; (80004bc <Keypad_init+0xe4>)
 80003de:	2201      	movs	r2, #1
 80003e0:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80003e2:	4b36      	ldr	r3, [pc, #216]	; (80004bc <Keypad_init+0xe4>)
 80003e4:	2204      	movs	r2, #4
 80003e6:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80003e8:	4b34      	ldr	r3, [pc, #208]	; (80004bc <Keypad_init+0xe4>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinCfg);
 80003ee:	4933      	ldr	r1, [pc, #204]	; (80004bc <Keypad_init+0xe4>)
 80003f0:	4833      	ldr	r0, [pc, #204]	; (80004c0 <Keypad_init+0xe8>)
 80003f2:	f000 faff 	bl	80009f4 <MCAL_GPIO_Init>

	pinCfg.GPIO_PinNumber=R1;
 80003f6:	4b31      	ldr	r3, [pc, #196]	; (80004bc <Keypad_init+0xe4>)
 80003f8:	2202      	movs	r2, #2
 80003fa:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80003fc:	4b2f      	ldr	r3, [pc, #188]	; (80004bc <Keypad_init+0xe4>)
 80003fe:	2204      	movs	r2, #4
 8000400:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000402:	4b2e      	ldr	r3, [pc, #184]	; (80004bc <Keypad_init+0xe4>)
 8000404:	2201      	movs	r2, #1
 8000406:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinCfg);
 8000408:	492c      	ldr	r1, [pc, #176]	; (80004bc <Keypad_init+0xe4>)
 800040a:	482d      	ldr	r0, [pc, #180]	; (80004c0 <Keypad_init+0xe8>)
 800040c:	f000 faf2 	bl	80009f4 <MCAL_GPIO_Init>

	pinCfg.GPIO_PinNumber=R2;
 8000410:	4b2a      	ldr	r3, [pc, #168]	; (80004bc <Keypad_init+0xe4>)
 8000412:	2208      	movs	r2, #8
 8000414:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000416:	4b29      	ldr	r3, [pc, #164]	; (80004bc <Keypad_init+0xe4>)
 8000418:	2204      	movs	r2, #4
 800041a:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 800041c:	4b27      	ldr	r3, [pc, #156]	; (80004bc <Keypad_init+0xe4>)
 800041e:	2201      	movs	r2, #1
 8000420:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinCfg);
 8000422:	4926      	ldr	r1, [pc, #152]	; (80004bc <Keypad_init+0xe4>)
 8000424:	4826      	ldr	r0, [pc, #152]	; (80004c0 <Keypad_init+0xe8>)
 8000426:	f000 fae5 	bl	80009f4 <MCAL_GPIO_Init>

	pinCfg.GPIO_PinNumber=R3;
 800042a:	4b24      	ldr	r3, [pc, #144]	; (80004bc <Keypad_init+0xe4>)
 800042c:	2210      	movs	r2, #16
 800042e:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000430:	4b22      	ldr	r3, [pc, #136]	; (80004bc <Keypad_init+0xe4>)
 8000432:	2204      	movs	r2, #4
 8000434:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000436:	4b21      	ldr	r3, [pc, #132]	; (80004bc <Keypad_init+0xe4>)
 8000438:	2201      	movs	r2, #1
 800043a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinCfg);
 800043c:	491f      	ldr	r1, [pc, #124]	; (80004bc <Keypad_init+0xe4>)
 800043e:	4820      	ldr	r0, [pc, #128]	; (80004c0 <Keypad_init+0xe8>)
 8000440:	f000 fad8 	bl	80009f4 <MCAL_GPIO_Init>

	pinCfg.GPIO_PinNumber=C0;
 8000444:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <Keypad_init+0xe4>)
 8000446:	2220      	movs	r2, #32
 8000448:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800044a:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <Keypad_init+0xe4>)
 800044c:	2204      	movs	r2, #4
 800044e:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000450:	4b1a      	ldr	r3, [pc, #104]	; (80004bc <Keypad_init+0xe4>)
 8000452:	2201      	movs	r2, #1
 8000454:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinCfg);
 8000456:	4919      	ldr	r1, [pc, #100]	; (80004bc <Keypad_init+0xe4>)
 8000458:	4819      	ldr	r0, [pc, #100]	; (80004c0 <Keypad_init+0xe8>)
 800045a:	f000 facb 	bl	80009f4 <MCAL_GPIO_Init>

	pinCfg.GPIO_PinNumber=C1;
 800045e:	4b17      	ldr	r3, [pc, #92]	; (80004bc <Keypad_init+0xe4>)
 8000460:	2240      	movs	r2, #64	; 0x40
 8000462:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000464:	4b15      	ldr	r3, [pc, #84]	; (80004bc <Keypad_init+0xe4>)
 8000466:	2204      	movs	r2, #4
 8000468:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 800046a:	4b14      	ldr	r3, [pc, #80]	; (80004bc <Keypad_init+0xe4>)
 800046c:	2201      	movs	r2, #1
 800046e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinCfg);
 8000470:	4912      	ldr	r1, [pc, #72]	; (80004bc <Keypad_init+0xe4>)
 8000472:	4813      	ldr	r0, [pc, #76]	; (80004c0 <Keypad_init+0xe8>)
 8000474:	f000 fabe 	bl	80009f4 <MCAL_GPIO_Init>

	pinCfg.GPIO_PinNumber=C2;
 8000478:	4b10      	ldr	r3, [pc, #64]	; (80004bc <Keypad_init+0xe4>)
 800047a:	2280      	movs	r2, #128	; 0x80
 800047c:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <Keypad_init+0xe4>)
 8000480:	2204      	movs	r2, #4
 8000482:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000484:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <Keypad_init+0xe4>)
 8000486:	2201      	movs	r2, #1
 8000488:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinCfg);
 800048a:	490c      	ldr	r1, [pc, #48]	; (80004bc <Keypad_init+0xe4>)
 800048c:	480c      	ldr	r0, [pc, #48]	; (80004c0 <Keypad_init+0xe8>)
 800048e:	f000 fab1 	bl	80009f4 <MCAL_GPIO_Init>

	pinCfg.GPIO_PinNumber=C3;
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <Keypad_init+0xe4>)
 8000494:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000498:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <Keypad_init+0xe4>)
 800049c:	2204      	movs	r2, #4
 800049e:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <Keypad_init+0xe4>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinCfg);
 80004a6:	4905      	ldr	r1, [pc, #20]	; (80004bc <Keypad_init+0xe4>)
 80004a8:	4805      	ldr	r0, [pc, #20]	; (80004c0 <Keypad_init+0xe8>)
 80004aa:	f000 faa3 	bl	80009f4 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePort(KEYPAD_PORT, 0xFF);
 80004ae:	21ff      	movs	r1, #255	; 0xff
 80004b0:	4803      	ldr	r0, [pc, #12]	; (80004c0 <Keypad_init+0xe8>)
 80004b2:	f000 fb4c 	bl	8000b4e <MCAL_GPIO_WritePort>
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	2000003c 	.word	0x2000003c
 80004c0:	40010c00 	.word	0x40010c00

080004c4 <Keypad_getkey>:

char Keypad_getkey(){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
	int i,j;
	for (i = 0; i < 4; i++){
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	e0b4      	b.n	800063a <Keypad_getkey+0x176>
		//	KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
		//	KEYPAD_PORT &= ~(1<<Key_padCol[i]);
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[0], GPIO_PIN_SET);
 80004d0:	4b5e      	ldr	r3, [pc, #376]	; (800064c <Keypad_getkey+0x188>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	2201      	movs	r2, #1
 80004d8:	4619      	mov	r1, r3
 80004da:	485d      	ldr	r0, [pc, #372]	; (8000650 <Keypad_getkey+0x18c>)
 80004dc:	f000 fb20 	bl	8000b20 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[1], GPIO_PIN_SET);
 80004e0:	4b5a      	ldr	r3, [pc, #360]	; (800064c <Keypad_getkey+0x188>)
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	2201      	movs	r2, #1
 80004e8:	4619      	mov	r1, r3
 80004ea:	4859      	ldr	r0, [pc, #356]	; (8000650 <Keypad_getkey+0x18c>)
 80004ec:	f000 fb18 	bl	8000b20 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[2], GPIO_PIN_SET);
 80004f0:	4b56      	ldr	r3, [pc, #344]	; (800064c <Keypad_getkey+0x188>)
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	2201      	movs	r2, #1
 80004f8:	4619      	mov	r1, r3
 80004fa:	4855      	ldr	r0, [pc, #340]	; (8000650 <Keypad_getkey+0x18c>)
 80004fc:	f000 fb10 	bl	8000b20 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[3], GPIO_PIN_SET);
 8000500:	4b52      	ldr	r3, [pc, #328]	; (800064c <Keypad_getkey+0x188>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	b29b      	uxth	r3, r3
 8000506:	2201      	movs	r2, #1
 8000508:	4619      	mov	r1, r3
 800050a:	4851      	ldr	r0, [pc, #324]	; (8000650 <Keypad_getkey+0x18c>)
 800050c:	f000 fb08 	bl	8000b20 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[i], GPIO_PIN_RESET);
 8000510:	4a4e      	ldr	r2, [pc, #312]	; (800064c <Keypad_getkey+0x188>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000518:	b29b      	uxth	r3, r3
 800051a:	2200      	movs	r2, #0
 800051c:	4619      	mov	r1, r3
 800051e:	484c      	ldr	r0, [pc, #304]	; (8000650 <Keypad_getkey+0x18c>)
 8000520:	f000 fafe 	bl	8000b20 <MCAL_GPIO_WritePin>

		for(j = 0; j < 4; j++){
 8000524:	2300      	movs	r3, #0
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	e080      	b.n	800062c <Keypad_getkey+0x168>
			if ((MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j])==0))
 800052a:	4a4a      	ldr	r2, [pc, #296]	; (8000654 <Keypad_getkey+0x190>)
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000532:	b29b      	uxth	r3, r3
 8000534:	4619      	mov	r1, r3
 8000536:	4846      	ldr	r0, [pc, #280]	; (8000650 <Keypad_getkey+0x18c>)
 8000538:	f000 fadb 	bl	8000af2 <MCAL_GPIO_ReadPin>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d171      	bne.n	8000626 <Keypad_getkey+0x162>
			{
				while((MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j])==0));
 8000542:	bf00      	nop
 8000544:	4a43      	ldr	r2, [pc, #268]	; (8000654 <Keypad_getkey+0x190>)
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800054c:	b29b      	uxth	r3, r3
 800054e:	4619      	mov	r1, r3
 8000550:	483f      	ldr	r0, [pc, #252]	; (8000650 <Keypad_getkey+0x18c>)
 8000552:	f000 face 	bl	8000af2 <MCAL_GPIO_ReadPin>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d0f3      	beq.n	8000544 <Keypad_getkey+0x80>
				switch(i){
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b03      	cmp	r3, #3
 8000560:	d861      	bhi.n	8000626 <Keypad_getkey+0x162>
 8000562:	a201      	add	r2, pc, #4	; (adr r2, 8000568 <Keypad_getkey+0xa4>)
 8000564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000568:	08000579 	.word	0x08000579
 800056c:	080005a1 	.word	0x080005a1
 8000570:	080005c9 	.word	0x080005c9
 8000574:	080005f1 	.word	0x080005f1
				case (0):
										if (j == 0) return '7';
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d101      	bne.n	8000582 <Keypad_getkey+0xbe>
 800057e:	2337      	movs	r3, #55	; 0x37
 8000580:	e060      	b.n	8000644 <Keypad_getkey+0x180>
										else if (j == 1) return '4';
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d101      	bne.n	800058c <Keypad_getkey+0xc8>
 8000588:	2334      	movs	r3, #52	; 0x34
 800058a:	e05b      	b.n	8000644 <Keypad_getkey+0x180>
										else if (j == 2) return '1';
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	2b02      	cmp	r3, #2
 8000590:	d101      	bne.n	8000596 <Keypad_getkey+0xd2>
 8000592:	2331      	movs	r3, #49	; 0x31
 8000594:	e056      	b.n	8000644 <Keypad_getkey+0x180>
										else if (j == 3) return '?';
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	2b03      	cmp	r3, #3
 800059a:	d13d      	bne.n	8000618 <Keypad_getkey+0x154>
 800059c:	233f      	movs	r3, #63	; 0x3f
 800059e:	e051      	b.n	8000644 <Keypad_getkey+0x180>
				break;
				case (1):
										if (j == 0) return '8';
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d101      	bne.n	80005aa <Keypad_getkey+0xe6>
 80005a6:	2338      	movs	r3, #56	; 0x38
 80005a8:	e04c      	b.n	8000644 <Keypad_getkey+0x180>
										else if (j == 1) return '5';
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d101      	bne.n	80005b4 <Keypad_getkey+0xf0>
 80005b0:	2335      	movs	r3, #53	; 0x35
 80005b2:	e047      	b.n	8000644 <Keypad_getkey+0x180>
										else if (j == 2) return '2';
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	d101      	bne.n	80005be <Keypad_getkey+0xfa>
 80005ba:	2332      	movs	r3, #50	; 0x32
 80005bc:	e042      	b.n	8000644 <Keypad_getkey+0x180>
										else if (j == 3) return '0';
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	d12b      	bne.n	800061c <Keypad_getkey+0x158>
 80005c4:	2330      	movs	r3, #48	; 0x30
 80005c6:	e03d      	b.n	8000644 <Keypad_getkey+0x180>
				break;
				case (2):
										if (j == 0) return '9';
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d101      	bne.n	80005d2 <Keypad_getkey+0x10e>
 80005ce:	2339      	movs	r3, #57	; 0x39
 80005d0:	e038      	b.n	8000644 <Keypad_getkey+0x180>
										else if (j == 1) return '6';
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d101      	bne.n	80005dc <Keypad_getkey+0x118>
 80005d8:	2336      	movs	r3, #54	; 0x36
 80005da:	e033      	b.n	8000644 <Keypad_getkey+0x180>
										else if (j == 2) return '3';
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d101      	bne.n	80005e6 <Keypad_getkey+0x122>
 80005e2:	2333      	movs	r3, #51	; 0x33
 80005e4:	e02e      	b.n	8000644 <Keypad_getkey+0x180>
										else if (j == 3) return '=';
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	2b03      	cmp	r3, #3
 80005ea:	d119      	bne.n	8000620 <Keypad_getkey+0x15c>
 80005ec:	233d      	movs	r3, #61	; 0x3d
 80005ee:	e029      	b.n	8000644 <Keypad_getkey+0x180>
				break;
				case (3):
										if (j == 0) return '/';
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d101      	bne.n	80005fa <Keypad_getkey+0x136>
 80005f6:	232f      	movs	r3, #47	; 0x2f
 80005f8:	e024      	b.n	8000644 <Keypad_getkey+0x180>
										else if (j == 1) return '*';
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d101      	bne.n	8000604 <Keypad_getkey+0x140>
 8000600:	232a      	movs	r3, #42	; 0x2a
 8000602:	e01f      	b.n	8000644 <Keypad_getkey+0x180>
										else if (j == 2) return '-';
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2b02      	cmp	r3, #2
 8000608:	d101      	bne.n	800060e <Keypad_getkey+0x14a>
 800060a:	232d      	movs	r3, #45	; 0x2d
 800060c:	e01a      	b.n	8000644 <Keypad_getkey+0x180>
										else if (j == 3) return '+';
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	2b03      	cmp	r3, #3
 8000612:	d107      	bne.n	8000624 <Keypad_getkey+0x160>
 8000614:	232b      	movs	r3, #43	; 0x2b
 8000616:	e015      	b.n	8000644 <Keypad_getkey+0x180>
				break;
 8000618:	bf00      	nop
 800061a:	e004      	b.n	8000626 <Keypad_getkey+0x162>
				break;
 800061c:	bf00      	nop
 800061e:	e002      	b.n	8000626 <Keypad_getkey+0x162>
				break;
 8000620:	bf00      	nop
 8000622:	e000      	b.n	8000626 <Keypad_getkey+0x162>
				break;
 8000624:	bf00      	nop
		for(j = 0; j < 4; j++){
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	2b03      	cmp	r3, #3
 8000630:	f77f af7b 	ble.w	800052a <Keypad_getkey+0x66>
	for (i = 0; i < 4; i++){
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3301      	adds	r3, #1
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b03      	cmp	r3, #3
 800063e:	f77f af47 	ble.w	80004d0 <Keypad_getkey+0xc>
				}
			}
		}
	}
	return 'A';
 8000642:	2341      	movs	r3, #65	; 0x41
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000010 	.word	0x20000010
 8000650:	40010c00 	.word	0x40010c00
 8000654:	20000000 	.word	0x20000000

08000658 <LCD_INIT>:


GPIO_PiConfig_t pinCfg ;

void LCD_INIT()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	//DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
	//LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
	//EN_SWITCH,RS_SWITCH,RW_SWITCH input HighZ floating input

	my_wait(20);
 800065c:	2014      	movs	r0, #20
 800065e:	f7ff fd87 	bl	8000170 <my_wait>

	pinCfg.GPIO_PinNumber = RS_SWITCH;
 8000662:	4b5b      	ldr	r3, [pc, #364]	; (80007d0 <LCD_INIT+0x178>)
 8000664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000668:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800066a:	4b59      	ldr	r3, [pc, #356]	; (80007d0 <LCD_INIT+0x178>)
 800066c:	2204      	movs	r2, #4
 800066e:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000670:	4b57      	ldr	r3, [pc, #348]	; (80007d0 <LCD_INIT+0x178>)
 8000672:	2201      	movs	r2, #1
 8000674:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinCfg);
 8000676:	4956      	ldr	r1, [pc, #344]	; (80007d0 <LCD_INIT+0x178>)
 8000678:	4856      	ldr	r0, [pc, #344]	; (80007d4 <LCD_INIT+0x17c>)
 800067a:	f000 f9bb 	bl	80009f4 <MCAL_GPIO_Init>

	pinCfg.GPIO_PinNumber = RW_SWITCH;
 800067e:	4b54      	ldr	r3, [pc, #336]	; (80007d0 <LCD_INIT+0x178>)
 8000680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000684:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000686:	4b52      	ldr	r3, [pc, #328]	; (80007d0 <LCD_INIT+0x178>)
 8000688:	2204      	movs	r2, #4
 800068a:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 800068c:	4b50      	ldr	r3, [pc, #320]	; (80007d0 <LCD_INIT+0x178>)
 800068e:	2201      	movs	r2, #1
 8000690:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinCfg);
 8000692:	494f      	ldr	r1, [pc, #316]	; (80007d0 <LCD_INIT+0x178>)
 8000694:	484f      	ldr	r0, [pc, #316]	; (80007d4 <LCD_INIT+0x17c>)
 8000696:	f000 f9ad 	bl	80009f4 <MCAL_GPIO_Init>

	pinCfg.GPIO_PinNumber = EN_SWITCH;
 800069a:	4b4d      	ldr	r3, [pc, #308]	; (80007d0 <LCD_INIT+0x178>)
 800069c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006a0:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006a2:	4b4b      	ldr	r3, [pc, #300]	; (80007d0 <LCD_INIT+0x178>)
 80006a4:	2204      	movs	r2, #4
 80006a6:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80006a8:	4b49      	ldr	r3, [pc, #292]	; (80007d0 <LCD_INIT+0x178>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinCfg);
 80006ae:	4948      	ldr	r1, [pc, #288]	; (80007d0 <LCD_INIT+0x178>)
 80006b0:	4848      	ldr	r0, [pc, #288]	; (80007d4 <LCD_INIT+0x17c>)
 80006b2:	f000 f99f 	bl	80009f4 <MCAL_GPIO_Init>

	//DataDir_LCD_PORT = 0xFF;
	//============================
	//DATA Pins output with speed 10mhz
	//PA1 output push pull mode
	pinCfg.GPIO_PinNumber=GPIO_PIN_0;
 80006b6:	4b46      	ldr	r3, [pc, #280]	; (80007d0 <LCD_INIT+0x178>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006bc:	4b44      	ldr	r3, [pc, #272]	; (80007d0 <LCD_INIT+0x178>)
 80006be:	2204      	movs	r2, #4
 80006c0:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80006c2:	4b43      	ldr	r3, [pc, #268]	; (80007d0 <LCD_INIT+0x178>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinCfg);
 80006c8:	4941      	ldr	r1, [pc, #260]	; (80007d0 <LCD_INIT+0x178>)
 80006ca:	4842      	ldr	r0, [pc, #264]	; (80007d4 <LCD_INIT+0x17c>)
 80006cc:	f000 f992 	bl	80009f4 <MCAL_GPIO_Init>

	//PA1 output push pull mode
	pinCfg.GPIO_PinNumber=GPIO_PIN_1;
 80006d0:	4b3f      	ldr	r3, [pc, #252]	; (80007d0 <LCD_INIT+0x178>)
 80006d2:	2202      	movs	r2, #2
 80006d4:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006d6:	4b3e      	ldr	r3, [pc, #248]	; (80007d0 <LCD_INIT+0x178>)
 80006d8:	2204      	movs	r2, #4
 80006da:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80006dc:	4b3c      	ldr	r3, [pc, #240]	; (80007d0 <LCD_INIT+0x178>)
 80006de:	2201      	movs	r2, #1
 80006e0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinCfg);
 80006e2:	493b      	ldr	r1, [pc, #236]	; (80007d0 <LCD_INIT+0x178>)
 80006e4:	483b      	ldr	r0, [pc, #236]	; (80007d4 <LCD_INIT+0x17c>)
 80006e6:	f000 f985 	bl	80009f4 <MCAL_GPIO_Init>

	//PA2 output push pull mode
	pinCfg.GPIO_PinNumber=GPIO_PIN_2;
 80006ea:	4b39      	ldr	r3, [pc, #228]	; (80007d0 <LCD_INIT+0x178>)
 80006ec:	2204      	movs	r2, #4
 80006ee:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006f0:	4b37      	ldr	r3, [pc, #220]	; (80007d0 <LCD_INIT+0x178>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80006f6:	4b36      	ldr	r3, [pc, #216]	; (80007d0 <LCD_INIT+0x178>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinCfg);
 80006fc:	4934      	ldr	r1, [pc, #208]	; (80007d0 <LCD_INIT+0x178>)
 80006fe:	4835      	ldr	r0, [pc, #212]	; (80007d4 <LCD_INIT+0x17c>)
 8000700:	f000 f978 	bl	80009f4 <MCAL_GPIO_Init>

	//PA3 output push pull mode
	pinCfg.GPIO_PinNumber=GPIO_PIN_3;
 8000704:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <LCD_INIT+0x178>)
 8000706:	2208      	movs	r2, #8
 8000708:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800070a:	4b31      	ldr	r3, [pc, #196]	; (80007d0 <LCD_INIT+0x178>)
 800070c:	2204      	movs	r2, #4
 800070e:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000710:	4b2f      	ldr	r3, [pc, #188]	; (80007d0 <LCD_INIT+0x178>)
 8000712:	2201      	movs	r2, #1
 8000714:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinCfg);
 8000716:	492e      	ldr	r1, [pc, #184]	; (80007d0 <LCD_INIT+0x178>)
 8000718:	482e      	ldr	r0, [pc, #184]	; (80007d4 <LCD_INIT+0x17c>)
 800071a:	f000 f96b 	bl	80009f4 <MCAL_GPIO_Init>

	//PA4 output push pull mode
	pinCfg.GPIO_PinNumber=GPIO_PIN_4;
 800071e:	4b2c      	ldr	r3, [pc, #176]	; (80007d0 <LCD_INIT+0x178>)
 8000720:	2210      	movs	r2, #16
 8000722:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000724:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <LCD_INIT+0x178>)
 8000726:	2204      	movs	r2, #4
 8000728:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 800072a:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <LCD_INIT+0x178>)
 800072c:	2201      	movs	r2, #1
 800072e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinCfg);
 8000730:	4927      	ldr	r1, [pc, #156]	; (80007d0 <LCD_INIT+0x178>)
 8000732:	4828      	ldr	r0, [pc, #160]	; (80007d4 <LCD_INIT+0x17c>)
 8000734:	f000 f95e 	bl	80009f4 <MCAL_GPIO_Init>

	//PA5 output push pull mode
	pinCfg.GPIO_PinNumber=GPIO_PIN_5;
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <LCD_INIT+0x178>)
 800073a:	2220      	movs	r2, #32
 800073c:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <LCD_INIT+0x178>)
 8000740:	2204      	movs	r2, #4
 8000742:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000744:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <LCD_INIT+0x178>)
 8000746:	2201      	movs	r2, #1
 8000748:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinCfg);
 800074a:	4921      	ldr	r1, [pc, #132]	; (80007d0 <LCD_INIT+0x178>)
 800074c:	4821      	ldr	r0, [pc, #132]	; (80007d4 <LCD_INIT+0x17c>)
 800074e:	f000 f951 	bl	80009f4 <MCAL_GPIO_Init>

	//PA6 output push pull mode
	pinCfg.GPIO_PinNumber=GPIO_PIN_6;
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <LCD_INIT+0x178>)
 8000754:	2240      	movs	r2, #64	; 0x40
 8000756:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000758:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <LCD_INIT+0x178>)
 800075a:	2204      	movs	r2, #4
 800075c:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <LCD_INIT+0x178>)
 8000760:	2201      	movs	r2, #1
 8000762:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinCfg);
 8000764:	491a      	ldr	r1, [pc, #104]	; (80007d0 <LCD_INIT+0x178>)
 8000766:	481b      	ldr	r0, [pc, #108]	; (80007d4 <LCD_INIT+0x17c>)
 8000768:	f000 f944 	bl	80009f4 <MCAL_GPIO_Init>

	//PA7 output push pull mode
	pinCfg.GPIO_PinNumber=GPIO_PIN_7;
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <LCD_INIT+0x178>)
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <LCD_INIT+0x178>)
 8000774:	2204      	movs	r2, #4
 8000776:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <LCD_INIT+0x178>)
 800077a:	2201      	movs	r2, #1
 800077c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinCfg);
 800077e:	4914      	ldr	r1, [pc, #80]	; (80007d0 <LCD_INIT+0x178>)
 8000780:	4814      	ldr	r0, [pc, #80]	; (80007d4 <LCD_INIT+0x17c>)
 8000782:	f000 f937 	bl	80009f4 <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078c:	4811      	ldr	r0, [pc, #68]	; (80007d4 <LCD_INIT+0x17c>)
 800078e:	f000 f9c7 	bl	8000b20 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000798:	480e      	ldr	r0, [pc, #56]	; (80007d4 <LCD_INIT+0x17c>)
 800079a:	f000 f9c1 	bl	8000b20 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a4:	480b      	ldr	r0, [pc, #44]	; (80007d4 <LCD_INIT+0x17c>)
 80007a6:	f000 f9bb 	bl	8000b20 <MCAL_GPIO_WritePin>
	
	my_wait(15);
 80007aa:	200f      	movs	r0, #15
 80007ac:	f7ff fce0 	bl	8000170 <my_wait>

	LCD_clear_screen();
 80007b0:	f000 f812 	bl	80007d8 <LCD_clear_screen>
	//#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 80007b4:	2038      	movs	r0, #56	; 0x38
 80007b6:	f000 f851 	bl	800085c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80007ba:	2006      	movs	r0, #6
 80007bc:	f000 f84e 	bl	800085c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80007c0:	2080      	movs	r0, #128	; 0x80
 80007c2:	f000 f84b 	bl	800085c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80007c6:	200f      	movs	r0, #15
 80007c8:	f000 f848 	bl	800085c <LCD_WRITE_COMMAND>
	//LCD_WRITE_COMMAND(0x01);
	//LCD_WRITE_COMMAND(0x02);
	//LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	//#endif

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000003c 	.word	0x2000003c
 80007d4:	40010800 	.word	0x40010800

080007d8 <LCD_clear_screen>:
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);


}

void LCD_clear_screen(){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80007dc:	2001      	movs	r0, #1
 80007de:	f000 f83d 	bl	800085c <LCD_WRITE_COMMAND>
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <LCD_lcd_kick>:

void LCD_lcd_kick(){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	//LCD_CTRL |= (1 << EN_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f2:	4807      	ldr	r0, [pc, #28]	; (8000810 <LCD_lcd_kick+0x28>)
 80007f4:	f000 f994 	bl	8000b20 <MCAL_GPIO_WritePin>
	my_wait(50);
 80007f8:	2032      	movs	r0, #50	; 0x32
 80007fa:	f7ff fcb9 	bl	8000170 <my_wait>
	//LCD_CTRL &= ~(1 << EN_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <LCD_lcd_kick+0x28>)
 8000806:	f000 f98b 	bl	8000b20 <MCAL_GPIO_WritePin>
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40010800 	.word	0x40010800

08000814 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	460a      	mov	r2, r1
 800081e:	71fb      	strb	r3, [r7, #7]
 8000820:	4613      	mov	r3, r2
 8000822:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d108      	bne.n	800083c <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 800082a:	79bb      	ldrb	r3, [r7, #6]
 800082c:	2b0f      	cmp	r3, #15
 800082e:	d805      	bhi.n	800083c <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 8000830:	79bb      	ldrb	r3, [r7, #6]
 8000832:	3b80      	subs	r3, #128	; 0x80
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f810 	bl	800085c <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d108      	bne.n	8000854 <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 8000842:	79bb      	ldrb	r3, [r7, #6]
 8000844:	2b0f      	cmp	r3, #15
 8000846:	d805      	bhi.n	8000854 <LCD_GOTO_XY+0x40>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	3b40      	subs	r3, #64	; 0x40
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f804 	bl	800085c <LCD_WRITE_COMMAND>
		}
	}
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(unsigned char command){
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
	//#ifdef EIGHT_BIT_MODE
	//LCD_check_lcd_isbusy();
	//LCD_PORT = command;
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	b29b      	uxth	r3, r3
 800086a:	4619      	mov	r1, r3
 800086c:	480b      	ldr	r0, [pc, #44]	; (800089c <LCD_WRITE_COMMAND+0x40>)
 800086e:	f000 f96e 	bl	8000b4e <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000878:	4808      	ldr	r0, [pc, #32]	; (800089c <LCD_WRITE_COMMAND+0x40>)
 800087a:	f000 f951 	bl	8000b20 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000884:	4805      	ldr	r0, [pc, #20]	; (800089c <LCD_WRITE_COMMAND+0x40>)
 8000886:	f000 f94b 	bl	8000b20 <MCAL_GPIO_WritePin>

	//LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	my_wait(1);
 800088a:	2001      	movs	r0, #1
 800088c:	f7ff fc70 	bl	8000170 <my_wait>
	LCD_lcd_kick();
 8000890:	f7ff ffaa 	bl	80007e8 <LCD_lcd_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	LCD_lcd_kick();
#endif
}*/
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40010800 	.word	0x40010800

080008a0 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
	//#ifdef EIGHT_BIT_MODE
	//LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_CTRL, character);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	4619      	mov	r1, r3
 80008b0:	480b      	ldr	r0, [pc, #44]	; (80008e0 <LCD_WRITE_CHAR+0x40>)
 80008b2:	f000 f94c 	bl	8000b4e <MCAL_GPIO_WritePort>
	// LCD_PORT 	= character;
	//LCD_CTRL &= ~(1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL,RW_SWITCH,GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008bc:	4808      	ldr	r0, [pc, #32]	; (80008e0 <LCD_WRITE_CHAR+0x40>)
 80008be:	f000 f92f 	bl	8000b20 <MCAL_GPIO_WritePin>
	//LCD_CTRL |= (1 << RS_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL,RS_SWITCH,GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <LCD_WRITE_CHAR+0x40>)
 80008ca:	f000 f929 	bl	8000b20 <MCAL_GPIO_WritePin>
	my_wait(1);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f7ff fc4e 	bl	8000170 <my_wait>

	LCD_lcd_kick();
 80008d4:	f7ff ff88 	bl	80007e8 <LCD_lcd_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
	LCD_lcd_kick ();
#endif*/
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40010800 	.word	0x40010800

080008e4 <LCD_WRITE_STRING>:



void LCD_WRITE_STRING(char* string)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	int count = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 80008f0:	e01c      	b.n	800092c <LCD_WRITE_STRING+0x48>
		count++;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3301      	adds	r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	607a      	str	r2, [r7, #4]
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ffcd 	bl	80008a0 <LCD_WRITE_CHAR>
		if (count == 16)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2b10      	cmp	r3, #16
 800090a:	d104      	bne.n	8000916 <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2,0);
 800090c:	2100      	movs	r1, #0
 800090e:	2002      	movs	r0, #2
 8000910:	f7ff ff80 	bl	8000814 <LCD_GOTO_XY>
 8000914:	e00a      	b.n	800092c <LCD_WRITE_STRING+0x48>
		}
		else if (count == 32)
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	2b20      	cmp	r3, #32
 800091a:	d107      	bne.n	800092c <LCD_WRITE_STRING+0x48>
		{
			LCD_clear_screen();
 800091c:	f7ff ff5c 	bl	80007d8 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 8000920:	2100      	movs	r1, #0
 8000922:	2001      	movs	r0, #1
 8000924:	f7ff ff76 	bl	8000814 <LCD_GOTO_XY>
			count = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1de      	bne.n	80008f2 <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <Get_CRLH_Position>:
 * 				-LQFP48 Package has only A & B,Part of C & D exported as External Pins from the MCU
 */

//Get_CRLH_Position function to get the position of the specified pin in either CRL or CRH Register
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800094c:	d03c      	beq.n	80009c8 <Get_CRLH_Position+0x8c>
 800094e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000952:	dc11      	bgt.n	8000978 <Get_CRLH_Position+0x3c>
 8000954:	2b08      	cmp	r3, #8
 8000956:	d02f      	beq.n	80009b8 <Get_CRLH_Position+0x7c>
 8000958:	2b08      	cmp	r3, #8
 800095a:	dc06      	bgt.n	800096a <Get_CRLH_Position+0x2e>
 800095c:	2b02      	cmp	r3, #2
 800095e:	d027      	beq.n	80009b0 <Get_CRLH_Position+0x74>
 8000960:	2b04      	cmp	r3, #4
 8000962:	d027      	beq.n	80009b4 <Get_CRLH_Position+0x78>
 8000964:	2b01      	cmp	r3, #1
 8000966:	d021      	beq.n	80009ac <Get_CRLH_Position+0x70>
 8000968:	e03e      	b.n	80009e8 <Get_CRLH_Position+0xac>
 800096a:	2b20      	cmp	r3, #32
 800096c:	d028      	beq.n	80009c0 <Get_CRLH_Position+0x84>
 800096e:	2b80      	cmp	r3, #128	; 0x80
 8000970:	d028      	beq.n	80009c4 <Get_CRLH_Position+0x88>
 8000972:	2b10      	cmp	r3, #16
 8000974:	d022      	beq.n	80009bc <Get_CRLH_Position+0x80>
 8000976:	e037      	b.n	80009e8 <Get_CRLH_Position+0xac>
 8000978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800097c:	d02c      	beq.n	80009d8 <Get_CRLH_Position+0x9c>
 800097e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000982:	dc09      	bgt.n	8000998 <Get_CRLH_Position+0x5c>
 8000984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000988:	d022      	beq.n	80009d0 <Get_CRLH_Position+0x94>
 800098a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800098e:	d021      	beq.n	80009d4 <Get_CRLH_Position+0x98>
 8000990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000994:	d01a      	beq.n	80009cc <Get_CRLH_Position+0x90>
 8000996:	e027      	b.n	80009e8 <Get_CRLH_Position+0xac>
 8000998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800099c:	d020      	beq.n	80009e0 <Get_CRLH_Position+0xa4>
 800099e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009a2:	d01f      	beq.n	80009e4 <Get_CRLH_Position+0xa8>
 80009a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009a8:	d018      	beq.n	80009dc <Get_CRLH_Position+0xa0>
 80009aa:	e01d      	b.n	80009e8 <Get_CRLH_Position+0xac>
	{
	case GPIO_PIN_0:
		return 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	e01c      	b.n	80009ea <Get_CRLH_Position+0xae>
		break;
	case GPIO_PIN_1:
		return 4;
 80009b0:	2304      	movs	r3, #4
 80009b2:	e01a      	b.n	80009ea <Get_CRLH_Position+0xae>
		break;
	case GPIO_PIN_2:
		return 8;
 80009b4:	2308      	movs	r3, #8
 80009b6:	e018      	b.n	80009ea <Get_CRLH_Position+0xae>
		break;
	case GPIO_PIN_3:
		return 12;
 80009b8:	230c      	movs	r3, #12
 80009ba:	e016      	b.n	80009ea <Get_CRLH_Position+0xae>
		break;
	case GPIO_PIN_4:
		return 16;
 80009bc:	2310      	movs	r3, #16
 80009be:	e014      	b.n	80009ea <Get_CRLH_Position+0xae>
		break;
	case GPIO_PIN_5:
		return 20;
 80009c0:	2314      	movs	r3, #20
 80009c2:	e012      	b.n	80009ea <Get_CRLH_Position+0xae>
		break;
	case GPIO_PIN_7:
		return 24;
 80009c4:	2318      	movs	r3, #24
 80009c6:	e010      	b.n	80009ea <Get_CRLH_Position+0xae>
		break;
	case GPIO_PIN_8:
		return 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	e00e      	b.n	80009ea <Get_CRLH_Position+0xae>
		break;
	case GPIO_PIN_9:
		return 4;
 80009cc:	2304      	movs	r3, #4
 80009ce:	e00c      	b.n	80009ea <Get_CRLH_Position+0xae>
		break;
	case GPIO_PIN_10:
		return 8;
 80009d0:	2308      	movs	r3, #8
 80009d2:	e00a      	b.n	80009ea <Get_CRLH_Position+0xae>
		break;
	case GPIO_PIN_11:
		return 12;
 80009d4:	230c      	movs	r3, #12
 80009d6:	e008      	b.n	80009ea <Get_CRLH_Position+0xae>
		break;
	case GPIO_PIN_12:
		return 16;
 80009d8:	2310      	movs	r3, #16
 80009da:	e006      	b.n	80009ea <Get_CRLH_Position+0xae>
		break;
	case GPIO_PIN_13:
		return 20;
 80009dc:	2314      	movs	r3, #20
 80009de:	e004      	b.n	80009ea <Get_CRLH_Position+0xae>
		break;
	case GPIO_PIN_14:
		return 24;
 80009e0:	2318      	movs	r3, #24
 80009e2:	e002      	b.n	80009ea <Get_CRLH_Position+0xae>
		break;
	case GPIO_PIN_15:
		return 28;
 80009e4:	231c      	movs	r3, #28
 80009e6:	e000      	b.n	80009ea <Get_CRLH_Position+0xae>
		break;
	}
	return 0 ;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <MCAL_GPIO_Init>:

void MCAL_GPIO_Init (GPIO_Typedef*GPIOx , GPIO_PiConfig_t* PinConfig)
{
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) from 0 to 7
	//Port configuration register high (GPIOx_CRH) from 8 to 15
	volatile uint32_t* configregister = NULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_CONFIG=0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	73fb      	strb	r3, [r7, #15]
	configregister=(PinConfig->GPIO_PinNumber< GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	2bff      	cmp	r3, #255	; 0xff
 8000a0c:	d801      	bhi.n	8000a12 <MCAL_GPIO_Init+0x1e>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	e001      	b.n	8000a16 <MCAL_GPIO_Init+0x22>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3304      	adds	r3, #4
 8000a16:	60bb      	str	r3, [r7, #8]
	//clear CNFy[1:0]: Port x configuration bits (y= 0 .. 7) | clear CNFy[1:0]: Port x configuration bits (y= 8 .. 15)
	//clear the specified CNF pins from Get_CRLH_Position function after storing ones in them(0xf)
	(*configregister)&=~(0xf<<Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff8d 	bl	800093c <Get_CRLH_Position>
 8000a22:	4603      	mov	r3, r0
 8000a24:	461a      	mov	r2, r3
 8000a26:	230f      	movs	r3, #15
 8000a28:	4093      	lsls	r3, r2
 8000a2a:	43da      	mvns	r2, r3
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	401a      	ands	r2, r3
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	601a      	str	r2, [r3, #0]

	//IF THE PIN IS OUTPUT
	if(	(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD	) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) ||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD	) ||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	789b      	ldrb	r3, [r3, #2]
 8000a3a:	2b07      	cmp	r3, #7
 8000a3c:	d00b      	beq.n	8000a56 <MCAL_GPIO_Init+0x62>
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	789b      	ldrb	r3, [r3, #2]
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	d007      	beq.n	8000a56 <MCAL_GPIO_Init+0x62>
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	789b      	ldrb	r3, [r3, #2]
 8000a4a:	2b05      	cmp	r3, #5
 8000a4c:	d003      	beq.n	8000a56 <MCAL_GPIO_Init+0x62>
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	789b      	ldrb	r3, [r3, #2]
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	d10e      	bne.n	8000a74 <MCAL_GPIO_Init+0x80>
	{
		//set CNF8[1:0] MODE8[1:0]

		PIN_CONFIG=( (((PinConfig->GPIO_MODE -4 )<<2) | (PinConfig->GPIO_Output_Speed)) & 0x0f );
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	789b      	ldrb	r3, [r3, #2]
 8000a5a:	3b04      	subs	r3, #4
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	b25a      	sxtb	r2, r3
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	78db      	ldrb	r3, [r3, #3]
 8000a64:	b25b      	sxtb	r3, r3
 8000a66:	4313      	orrs	r3, r2
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	f003 030f 	and.w	r3, r3, #15
 8000a70:	73fb      	strb	r3, [r7, #15]
 8000a72:	e02c      	b.n	8000ace <MCAL_GPIO_Init+0xda>
	}
	//if pin is input
	else //MODE=00:Input mode (reset state)
	{
		if(	(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO	) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	789b      	ldrb	r3, [r3, #2]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d003      	beq.n	8000a84 <MCAL_GPIO_Init+0x90>
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	789b      	ldrb	r3, [r3, #2]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d107      	bne.n	8000a94 <MCAL_GPIO_Init+0xa0>
		{
			//set CNF8[1:0] MODE8[1:0]
			PIN_CONFIG=( (((PinConfig->GPIO_MODE)<<2) |0x0) & 0x0f );
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	789b      	ldrb	r3, [r3, #2]
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	73fb      	strb	r3, [r7, #15]
 8000a92:	e01c      	b.n	8000ace <MCAL_GPIO_Init+0xda>
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	789b      	ldrb	r3, [r3, #2]
 8000a98:	2b08      	cmp	r3, #8
 8000a9a:	d102      	bne.n	8000aa2 <MCAL_GPIO_Init+0xae>
		{
			//set CNF8[1:0] MODE8[1:0]00
			PIN_CONFIG=( (((GPIO_MODE_INPUT_FLO )<<2) |0x0) & 0x0f );
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	e015      	b.n	8000ace <MCAL_GPIO_Init+0xda>
		}
		else //PU PD Input
		{
			PIN_CONFIG=( (((GPIO_MODE_INPUT_PU )<<2) |0x0) & 0x0f );
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE== GPIO_MODE_INPUT_PU)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	789b      	ldrb	r3, [r3, #2]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d107      	bne.n	8000abe <MCAL_GPIO_Init+0xca>
			{
				//PxODR= 1 Input pull up from table 20. port bit config table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	683a      	ldr	r2, [r7, #0]
 8000ab4:	8812      	ldrh	r2, [r2, #0]
 8000ab6:	431a      	orrs	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	e007      	b.n	8000ace <MCAL_GPIO_Init+0xda>

			}
			else
			{
				//PxODR= 1 Input pull up from table 20. port bit config table
				GPIOx->ODR &=~( PinConfig->GPIO_PinNumber);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	8812      	ldrh	r2, [r2, #0]
 8000ac6:	43d2      	mvns	r2, r2
 8000ac8:	401a      	ands	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configregister)|= ( (PIN_CONFIG)<<Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000ace:	7bfc      	ldrb	r4, [r7, #15]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff31 	bl	800093c <Get_CRLH_Position>
 8000ada:	4603      	mov	r3, r0
 8000adc:	fa04 f203 	lsl.w	r2, r4, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	601a      	str	r2, [r3, #0]
}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd90      	pop	{r4, r7, pc}

08000af2 <MCAL_GPIO_ReadPin>:
 * Note			-None
 */

//READ APIs
uint8_t MCAL_GPIO_ReadPin (GPIO_Typedef*GPIOx , uint16_t PinNumber)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b085      	sub	sp, #20
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	460b      	mov	r3, r1
 8000afc:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatus;
	if(((GPIOx->IDR) & PinNumber)!=(uint32_t)GPIO_PIN_RESET)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	887b      	ldrh	r3, [r7, #2]
 8000b04:	4013      	ands	r3, r2
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitstatus= GPIO_PIN_SET ;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
 8000b0e:	e001      	b.n	8000b14 <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitstatus=GPIO_PIN_RESET ;
 8000b10:	2300      	movs	r3, #0
 8000b12:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus ;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <MCAL_GPIO_WritePin>:
 * Note			-None
 */

//WRITE APIs
void MCAL_GPIO_WritePin (GPIO_Typedef*GPIOx , uint16_t PinNumber,uint8_t Value)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	807b      	strh	r3, [r7, #2]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	707b      	strb	r3, [r7, #1]
	if(Value!= GPIO_PIN_RESET)
 8000b30:	787b      	ldrb	r3, [r7, #1]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <MCAL_GPIO_WritePin+0x1e>
		//or
		/*Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
	These bits are write-only and can be accessed in Word mode only.
	0: No action on the corresponding ODRx bit
	1: Set the corresponding ODRx bit*/
		GPIOx->BSRR = PinNumber;
 8000b36:	887a      	ldrh	r2, [r7, #2]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	611a      	str	r2, [r3, #16]
	0: No action on the corresponding ODRx bit
	1: Reset the corresponding ODRx bit*/
		GPIOx->BRR = PinNumber ;
	}

}
 8000b3c:	e002      	b.n	8000b44 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = PinNumber ;
 8000b3e:	887a      	ldrh	r2, [r7, #2]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	615a      	str	r2, [r3, #20]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr

08000b4e <MCAL_GPIO_WritePort>:
 * @retval 		-None
 * Note			-None
 */

void MCAL_GPIO_WritePort (GPIO_Typedef*GPIOx , uint16_t Value)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	460b      	mov	r3, r1
 8000b58:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 8000b5a:	887a      	ldrh	r2, [r7, #2]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	60da      	str	r2, [r3, #12]

}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
	...

08000b6c <__libc_init_array>:
 8000b6c:	b570      	push	{r4, r5, r6, lr}
 8000b6e:	2500      	movs	r5, #0
 8000b70:	4e0c      	ldr	r6, [pc, #48]	; (8000ba4 <__libc_init_array+0x38>)
 8000b72:	4c0d      	ldr	r4, [pc, #52]	; (8000ba8 <__libc_init_array+0x3c>)
 8000b74:	1ba4      	subs	r4, r4, r6
 8000b76:	10a4      	asrs	r4, r4, #2
 8000b78:	42a5      	cmp	r5, r4
 8000b7a:	d109      	bne.n	8000b90 <__libc_init_array+0x24>
 8000b7c:	f000 f81a 	bl	8000bb4 <_init>
 8000b80:	2500      	movs	r5, #0
 8000b82:	4e0a      	ldr	r6, [pc, #40]	; (8000bac <__libc_init_array+0x40>)
 8000b84:	4c0a      	ldr	r4, [pc, #40]	; (8000bb0 <__libc_init_array+0x44>)
 8000b86:	1ba4      	subs	r4, r4, r6
 8000b88:	10a4      	asrs	r4, r4, #2
 8000b8a:	42a5      	cmp	r5, r4
 8000b8c:	d105      	bne.n	8000b9a <__libc_init_array+0x2e>
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}
 8000b90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b94:	4798      	blx	r3
 8000b96:	3501      	adds	r5, #1
 8000b98:	e7ee      	b.n	8000b78 <__libc_init_array+0xc>
 8000b9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b9e:	4798      	blx	r3
 8000ba0:	3501      	adds	r5, #1
 8000ba2:	e7f2      	b.n	8000b8a <__libc_init_array+0x1e>
 8000ba4:	08000c00 	.word	0x08000c00
 8000ba8:	08000c00 	.word	0x08000c00
 8000bac:	08000c00 	.word	0x08000c00
 8000bb0:	08000c04 	.word	0x08000c04

08000bb4 <_init>:
 8000bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb6:	bf00      	nop
 8000bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bba:	bc08      	pop	{r3}
 8000bbc:	469e      	mov	lr, r3
 8000bbe:	4770      	bx	lr

08000bc0 <_fini>:
 8000bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc2:	bf00      	nop
 8000bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bc6:	bc08      	pop	{r3}
 8000bc8:	469e      	mov	lr, r3
 8000bca:	4770      	bx	lr
